# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Test_PluginDialog
                                 A QGIS plugin
 testowa_wtyczka
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-22
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Natalia_Serafin
        email                : nserafin00@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

import numpy as np
from scipy.spatial import Delaunay
from math import sqrt
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsMessageLog, Qgis

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'test_plugin_dialog_base.ui'))

class Test_PluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Test_PluginDialog, self).__init__(parent)
        self.setupUi(self)
        self.pushButton.clicked.connect(self.count_selected_elements)
        self.pushButton_2.clicked.connect(self.count_height)
        self.pushButton_3.clicked.connect(self.count_p)
        
    def count_selected_elements(self):
        #number_of_selected_elements = 10
        selected_Features=self.mMapLayerComboBox_Layers.currentLayer().selectedFeatures()
        number_of_selected_elements= len(selected_Features)
        self.label.setText(str(f'wybrano: {number_of_selected_elements} elementów'))
        
    def count_height(self):
        if self.mMapLayerComboBox_Layers.currentLayer() is None:
            self.label.setText(str('Nie wybrano aktywnej warstwy.'))
            QgsMessageLog.logMessage('Nie wybrano aktywnej warstwy.', 'Różnica wysokoci', Qgis.Warning)
            return False

        zaznaczone_elementy = self.mMapLayerComboBox_Layers.currentLayer().selectedFeatures()
        if len(zaznaczone_elementy) < 2:
            self.label.setText(str('Wybierz co najmniej 2 punkty na warstwie.'))
            QgsMessageLog.logMessage('Wybierz co najmniej 2 punkty na warstwie.', 'Różnica wysokoci', Qgis.Warning)
            return False
        
        zaznaczone_elementy = self.mMapLayerComboBox_Layers.currentLayer().selectedFeatures()
        if len(zaznaczone_elementy) >  2:
            self.label.setText(str('Wybierz co najwyżej 2 punkty na warstwie.'))
            QgsMessageLog.logMessage('Wybierz co najwyżej 2 punkty na warstwie.', 'Różnica wysokoci', Qgis.Warning)
            return False
        
        zaznaczone_elementy = self.mMapLayerComboBox_Layers.currentLayer().selectedFeatures()
        h1 = zaznaczone_elementy[0]['h_plevrf2007nh'] 
        h2 = zaznaczone_elementy[1]['h_plevrf2007nh'] 
        roznica_H = float(h2)-float(h1)
        if roznica_H<0:
            roznica_H = roznica_H*(-1)
        elif roznica_H>0:
            roznica_H = roznica_H
        self.label.setText(str(roznica_H))
        self.label.setText(str(f'różnica wysokosci wynosi: {roznica_H:.3f} m'))
        QgsMessageLog.logMessage('Różnica wysokości między punktami wynosi: ' + str(roznica_H) + ' m' , ' Różnica wysokości', Qgis.Success)
    
    def count_p(self):
        zaznaczone_elementy = self.mMapLayerComboBox_Layers.currentLayer().selectedFeatures()
        if len(zaznaczone_elementy) < 3:
            self.label.setText(str('Wybierz co najmniej 3 punkty na warstwie.'))
            QgsMessageLog.logMessage('Wybierz co najmniej 3 punkty na warstwie.', 'Pole powierzchni', Qgis.Warning)
            return False

        xy = np.array([(float(p['x1992']), float(p['y1992'])) for p in zaznaczone_elementy])

        tri = Delaunay(xy)

        pole_P = 0.0
        for simp in tri.simplices:
            a, b, c = simp
            x1, y1 = xy[a]
            x2, y2 = xy[b]
            x3, y3 = xy[c]
            pole_P += abs(0.5 * (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)))

        pole_P = round(pole_P, 3)
        self.label.setText(str(f'pole powierzchni wynosi: {pole_P:.3f} m²'))
        QgsMessageLog.logMessage('Pole powierzchni między zaznaczonymi punktami: ' + str(pole_P) + ' m²', 'Pole powierzchni', Qgis.Success)