# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Test_PluginDialog
                                 A QGIS plugin
 testowa_wtyczka
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-22
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Natalia_Serafin
        email                : nserafin00@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsMessageLog, Qgis
import numpy as np
import os
from qgis.core import QgsProject, QgsPointXY
from qgis.utils import iface

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'test_plugin_dialog_base.ui'))

class Test_PluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Test_PluginDialog, self).__init__(parent)
        self.setupUi(self)
        self.pushButton_2.clicked.connect(self.count_height)
        self.pushButton_3.clicked.connect(self.count_p)
        
    def count_height(self):
        if self.mMapLayerComboBox_Layers.currentLayer() is None:
            self.label.setText(str('Nie wybrano aktywnej warstwy.'))
            QgsMessageLog.logMessage('Nie wybrano aktywnej warstwy.', 'Różnica wysokoci', Qgis.Warning)
            return False

        zaznaczone_elementy = self.mMapLayerComboBox_Layers.currentLayer().selectedFeatures()
        if len(zaznaczone_elementy) < 2:
            self.label.setText(str('Wybierz co najmniej 2 punkty na warstwie.'))
            QgsMessageLog.logMessage('Wybierz co najmniej 2 punkty na warstwie.', 'Różnica wysokoci', Qgis.Warning)
            return False
        
        zaznaczone_elementy = self.mMapLayerComboBox_Layers.currentLayer().selectedFeatures()
        if len(zaznaczone_elementy) >  2:
            self.label.setText(str('Wybierz co najwyżej 2 punkty na warstwie.'))
            QgsMessageLog.logMessage('Wybierz co najwyżej 2 punkty na warstwie.', 'Różnica wysokoci', Qgis.Warning)
            return False
        
        zaznaczone_elementy = self.mMapLayerComboBox_Layers.currentLayer().selectedFeatures()
        h1 = zaznaczone_elementy[0]['h_plevrf2007nh'] 
        h2 = zaznaczone_elementy[1]['h_plevrf2007nh'] 
        roznica_H = float(h2)-float(h1)
        if roznica_H<0:
            roznica_H = roznica_H*(-1)
        elif roznica_H>0:
            roznica_H = roznica_H
        self.label.setText(str(roznica_H))
        self.label.setText(str(f'różnica wysokosci wynosi: {roznica_H:.3f} m'))
        QgsMessageLog.logMessage('Różnica wysokości między punktami wynosi: ' + str(roznica_H) + ' m' , ' Różnica wysokości', Qgis.Success)
    
    def count_p(self):
        obiekty = self.mMapLayerComboBox_Layers.currentLayer().selectedFeatures()
        punkty = []
        for o in obiekty:
            x = float(o.attribute('x1992'))
            y = float(o.attribute('y1992'))
            x = float(o.geometry().asPoint().x())
            y = float(o.geometry().asPoint().y())
            p = QgsPointXY(x, y)
            punkty.append(p)
        if len(obiekty)<3:
            iface.messageBar().pushMessage("Pole powierzchni", 'Aby policzyć pole powierzchni wybierz co najmniej TRZY PUNKTY', level = Qgis.Warning)
            return
        if len(obiekty)>2:
            pole = 0
            dl = len(punkty)
            for e in range(dl):
                a = (e + 1) % dl
                pole += (punkty[a].x() + punkty[e].x()) * (punkty[a].y() - punkty[e].y())
            pole /= 2
            pole = round(abs(pole/10000), 3)
            pole = self.label.setText(str(pole) +'ha')
            QgsMessageLog.logMessage('Pole powierzchni między wybranymi punktami wynosi: {pole} ha', level = Qgis.Success)
        
            iface.messageBar().pushMessage("Pole powierzchni", 'Pole powierzchni zostało policzone', level = Qgis.Success)

